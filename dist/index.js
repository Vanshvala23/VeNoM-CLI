#!/usr/bin/env node
import chalk from 'chalk';
import { Command } from 'commander';
import ora from 'ora';
import fs from 'fs';
import path from 'path';
import inquirer from 'inquirer';
import { execSync } from 'child_process';
const program = new Command();
const spinner = ora(); // Initialize spinner (do not start immediately)
// Display CLI header
console.log(chalk.bgMagentaBright('Welcome to veNoM CLI'));
// CLI Version
program.version('1.0.0').description('veNoM CLI - Advanced CLI for project creation and management');
// Greet Command
program
    .command('greet [name]')
    .description('Greet someone')
    .option('-g, --greet <name>', 'Custom greeting name', 'World')
    .action((name, options) => {
    const message = `Hello, ${options.greet || name || 'World'}!`;
    console.log(chalk.green(message));
});
// Version Command
program
    .command('version')
    .description('Show CLI version')
    .action(() => {
    console.log(chalk.blue(`veNoM CLI version: ${program.version()}`));
});
// ASCII Art Command
program
    .command('ascii')
    .description('Display ASCII art')
    .option('-t, --text <text>', 'Text for ASCII art', 'Hello')
    .action((options) => {
    console.log(chalk.yellow(`ASCII Art: ${options.text}`)); // Add an ASCII art library for more functionality
});
// Create New Project Command
program
    .command('new <projectName>')
    .description('Create a new project')
    .action((projectName) => {
    spinner.start('Initializing project setup...');
    createNewProject(projectName);
});
// Info Command
program
    .command('info')
    .description('Display CLI info')
    .action(() => {
    console.log(chalk.green('veNoM CLI - Developed by Vansh'));
    console.log(chalk.bgMagentaBright('Visit my GitHub: **VanshVala23**'));
});
// Exit Command
program
    .command('exit')
    .description('Exit CLI')
    .action(() => {
    console.log(chalk.red('Goodbye! Exiting CLI...'));
    process.exit(0);
});
/// Create New Project Function
function createNewProject(projectName) {
    const projectPath = path.resolve(process.cwd(), projectName);
    if (fs.existsSync(projectPath)) {
        spinner.fail(`Project folder "${projectName}" already exists.`);
        return;
    }
    inquirer
        .prompt([
        {
            type: 'list',
            name: 'template',
            message: 'Choose a project template:',
            choices: ['React', 'Node.js', 'TypeScript', 'Angular', 'Vite', 'Empty'],
        },
    ])
        .then(({ template }) => {
        spinner.succeed('Template selected');
        fs.mkdirSync(projectPath);
        fs.writeFileSync(path.join(projectPath, 'README.md'), `# ${projectName}\n\nGenerated by veNoM CLI.`);
        switch (template) {
            case 'React':
                setupReactProject(projectPath, projectName);
                break;
            case 'Node.js':
                setupNodeProject(projectPath, projectName);
                break;
            case 'TypeScript':
                setupTypeScriptProject(projectPath, projectName);
                break;
            case 'Angular':
                setupAngularProject(projectPath, projectName);
                break;
            case 'Vite':
                setupViteProject(projectPath, projectName);
                break;
            default:
                console.log(chalk.yellow('Empty project created.'));
        }
    });
}
// Angular Project Setup
function setupAngularProject(projectPath, projectName) {
    spinner.start('Setting up Angular project...');
    try {
        // Initialize Angular app
        execSync(`npx @angular/cli new ${projectName} --directory .`, { cwd: projectPath, stdio: 'inherit' });
        spinner.succeed('Angular project setup complete.');
        console.log(chalk.cyan(`cd ${projectName}`));
        console.log(chalk.cyan('npm start'));
    }
    catch (error) {
        spinner.fail('Failed to set up Angular project.');
        console.error(error);
    }
}
// Vite Project Setup
function setupViteProject(projectPath, projectName) {
    spinner.start('Setting up Vite project...');
    try {
        // Initialize Vite app
        execSync(`npm create vite@latest ${projectName} --template react`, { cwd: projectPath, stdio: 'inherit' });
        spinner.succeed('Vite project setup complete.');
        console.log(chalk.cyan(`cd ${projectName}`));
        console.log(chalk.cyan('npm install'));
        console.log(chalk.cyan('npm run dev'));
    }
    catch (error) {
        spinner.fail('Failed to set up Vite project.');
        console.error(error);
    }
}
// React Project Setup
function setupReactProject(projectPath, projectName) {
    spinner.start('Setting up React project...');
    try {
        // Initialize React app
        execSync('npx create-react-app .', { cwd: projectPath, stdio: 'inherit' });
        // Install web-vitals
        execSync('npm install web-vitals', { cwd: projectPath, stdio: 'inherit' });
        // Create custom CSS file (styles.css)
        const cssFile = path.join(projectPath, 'src', 'styles.css');
        const cssContent = `
      body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
      }
      .logo {
        width: 100px;
        height: 100px;
        display: block;
        margin: 20px auto;
      }
    `;
        fs.writeFileSync(cssFile, cssContent);
        // Add logo image (just an empty file for now)
        const logoImage = path.join(projectPath, 'public', 'logo.png');
        fs.writeFileSync(logoImage, ''); // Replace with actual logo later
        // Update App.js to include logo and styles
        const appJsxFile = path.join(projectPath, 'src', 'App.js');
        let appJsxContent = fs.readFileSync(appJsxFile, 'utf-8');
        appJsxContent = appJsxContent.replace('import logo from \'./logo.svg\';', 'import \'./styles.css\'; // Custom CSS\nimport logo from \'./logo.png\'; // VanshJS logo');
        appJsxContent = appJsxContent.replace('<header className="App-header">', `<header className="App-header">
        <img src={logo} className="logo" alt="logo" />`);
        fs.writeFileSync(appJsxFile, appJsxContent);
        spinner.succeed('React project setup complete.');
        console.log(chalk.cyan(`cd ${projectName}`));
        console.log(chalk.cyan('npm start'));
    }
    catch (error) {
        spinner.fail('Failed to set up React project.');
        console.error(error);
    }
}
// Node.js Project Setup
function setupNodeProject(projectPath, projectName) {
    const spinner = ora('Setting up Node.js app...').start();
    const packageJson = {
        name: projectName,
        version: '1.0.0',
        description: 'A Node.js application',
        main: 'index.js',
        scripts: {
            start: 'node index.js',
        },
    };
    fs.writeFileSync(path.join(projectPath, 'package.json'), JSON.stringify(packageJson, null, 2));
    fs.writeFileSync(path.join(projectPath, 'index.js'), `console.log('Hello, ${projectName}!');`);
    try {
        execSync('npm install', { cwd: projectPath, stdio: 'inherit' });
        spinner.succeed('Node.js project setup complete.');
    }
    catch (error) {
        spinner.fail('Failed to install dependencies.');
        console.error(error);
    }
}
// TypeScript Project Setup
function setupTypeScriptProject(projectPath, projectName) {
    const spinner = ora('Setting up TypeScript app...').start();
    const packageJson = {
        name: projectName,
        version: '1.0.0',
        description: 'A TypeScript application',
        main: 'index.ts',
        scripts: {
            start: 'ts-node src/index.ts',
        },
    };
    const srcPath = path.join(projectPath, 'src');
    fs.mkdirSync(srcPath, { recursive: true });
    fs.writeFileSync(path.join(srcPath, 'index.ts'), `console.log('Hello, ${projectName}!');`);
    fs.writeFileSync(path.join(projectPath, 'package.json'), JSON.stringify(packageJson, null, 2));
    try {
        execSync('npm install typescript ts-node @types/node --save-dev', { cwd: projectPath, stdio: 'inherit' });
        spinner.succeed('TypeScript project setup complete.');
    }
    catch (error) {
        spinner.fail('Failed to install dependencies.');
        console.error(error);
    }
}
// Start CLI
program.parse(process.argv);
